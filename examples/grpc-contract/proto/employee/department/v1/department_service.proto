syntax = "proto3";

package employee.department.v1;

import "buf/validate/validate.proto";
import "employee/department/v1/department.proto";

// DepartmentService defines the gRPC service for managing departments in the employee management system.
service DepartmentService {
  // **Description**: Creates a new department.
  //
  // **Idempotency**: Yes (via `X-Request-ID` header)
  //
  // **Headers**:
  //
  // - `X-Request-ID`: Required - A unique identifier for the request.
  // - `Authorization`: Required - The authorization token for the request. Must be a valid JWT or OAuth token.
  //
  // **Error Codes**:
  //
  // - `Employee.Department.Conflict` (409): If a department with the same name already exists.
  // - `Employee.Department.ParentNotFound` (404): If the specified parent department does not exist.
  // - `Employee.Department.PreconditionFailed` (412): If the specified parent department is disabled or not groupable.
  // - `Common.Request.Invalid` (400): If the request did not pass validation checks.
  // - `Common.Request.Unauthenticated` (401): If the request is missing or has invalid credentials.
  // - `Common.Request.Forbidden` (403): If the account does not have permission to create a designation.
  rpc CreateDepartment(CreateDepartmentRequest) returns (CreateDepartmentResponse) {}

  // **Description**: Retrieves a department by its ID.
  //
  // **Idempotency**: No
  //
  // **Headers**:
  //
  // - `X-Request-ID`: Optional - A unique identifier for the request.
  // - `Authorization`: Required - The authorization token for the request. Must be a valid JWT or OAuth token.
  //
  // **Error Codes**:
  //
  // - `Employee.Department.NotFound` (404): If the department with the specified ID does not exist.
  // - `Common.Request.Invalid` (400): If the request did not pass validation checks
  // - `Common.Request.Unauthenticated` (401): If the request is missing or has invalid credentials.
  // - `Common.Request.Forbidden` (403): If the account does not have permission to view the department.
  rpc GetDepartment(GetDepartmentRequest) returns (GetDepartmentResponse) {}
}

// **Description**: Request message for the CreateDepartment RPC.
//
// <details>
// <summary>Example: <i>(Click to expand)</i></summary>
// ```json
// {
//   "name": "Engineering",
//   "parent_id": "123e4567-e89b-12d3-a456-426614174000",
//   "groupable": true,
//   "disabled": false
// }
// ```
// </details>
message CreateDepartmentRequest {
  // **Description**: The name of the department to be created.
  //
  // **Validations**:
  //
  // - Length: 3-100 characters
  //
  // **Business Constraints**:
  //
  // - The name must be unique across all departments.
  //
  // **Examples**: `Engineering`
  string name = 1 [(buf.validate.field) = {
    required: true
    string: {
      min_len: 3
      max_len: 100
    }
  }];
  // **Description**: The ID of the parent department, if this department is a sub-department.
  //
  // **Validations**:
  //
  // - Format: UUID
  //
  // **Business Constraints**:
  //
  // - The parent department must exist in the system.
  // - The parent department must be groupable.
  //
  // **Examples**: `123e4567-e89b-12d3-a456-426614174000`
  optional string parent_id = 2 [(buf.validate.field) = {
    required: false
    string: {uuid: true}
  }];
  // **Description**: Indicates whether the department can be used as a grouping for other departments.
  //
  // **Validations**: []
  //
  // **Examples**: `true` or `false`
  bool groupable = 3 [(buf.validate.field) = {required: false}];
  // **Description**: Indicates whether the department is disabled. Disabled departments are not active and cannot be used in operations.
  //
  // **Validations**: []
  //
  // **Examples**: `true` or `false`
  bool disabled = 4 [(buf.validate.field) = {required: false}];
}

// **Description**: Response message for the CreateDepartment RPC.
//
// <details>
// <summary>Example: <i>(Click to expand)</i></summary>
// ```json
// {
//   "item": {
//     "id": "123e4567-e89b-12d3-a456-426614174000",
//     "name": "Engineering",
//     "parent": {
//       "id": "123e4567-e89b-12d3-a456-426614174000",
//       "name": "Corporate"
//     },
//     "groupable": true,
//     "disabled": false
//   }
// }
// ```
// </details>
message CreateDepartmentResponse {
  // **Description**: The created department model.
  DepartmentModel item = 1 [(buf.validate.field) = {required: true}];
}

// **Description**: Request message for the GetDepartment RPC.
//
// <details>
// <summary>Example: <i>(Click to expand)</i></summary>
// ```json
// {
//   "id": "123e4567-e89b-12d3-a456-426614174000"
// }
// ```
// </details>
message GetDepartmentRequest {
  // **Description**: The ID of the department to retrieve.
  //
  // **Validations**:
  //
  // - Format: UUID
  //
  // **Examples**: `123e4567-e89b-12d3-a456-426614174000`
  string id = 1 [(buf.validate.field) = {
    required: true
    string: {uuid: true}
  }];
}

// **Description**: Response message for the GetDepartment RPC.
//
// <details>
// <summary>Example: <i>(Click to expand)</i></summary>
// ```json
// {
//   "item": {
//     "id": "123e4567-e89b-12d3-a456-426614174000",
//     "name": "Engineering",
//     "parent": {
//       "id": "123e4567-e89b-12d3-a456-426614174000",
//       "name": "Corporate"
//     },
//     "groupable": true,
//     "disabled": false
//   }
// }
// ```
// </details>
message GetDepartmentResponse {
  // **Description**: The retrieved department model.
  DepartmentModel item = 1 [(buf.validate.field) = {required: true}];
}
